// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountGRPCServiceClient is the client API for AccountGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountGRPCServiceClient interface {
	GetAccount(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*Account, error)
	GetUserAccounts(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*AllAccounts, error)
	GetAllUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllAccounts, error)
	CreateAccount(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Account, error)
	UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error)
	DeleteAccount(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type accountGRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountGRPCServiceClient(cc grpc.ClientConnInterface) AccountGRPCServiceClient {
	return &accountGRPCServiceClient{cc}
}

func (c *accountGRPCServiceClient) GetAccount(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/accountGRPC.AccountGRPCService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountGRPCServiceClient) GetUserAccounts(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*AllAccounts, error) {
	out := new(AllAccounts)
	err := c.cc.Invoke(ctx, "/accountGRPC.AccountGRPCService/GetUserAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountGRPCServiceClient) GetAllUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllAccounts, error) {
	out := new(AllAccounts)
	err := c.cc.Invoke(ctx, "/accountGRPC.AccountGRPCService/GetAllUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountGRPCServiceClient) CreateAccount(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/accountGRPC.AccountGRPCService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountGRPCServiceClient) UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/accountGRPC.AccountGRPCService/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountGRPCServiceClient) DeleteAccount(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/accountGRPC.AccountGRPCService/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountGRPCServiceServer is the server API for AccountGRPCService service.
// All implementations must embed UnimplementedAccountGRPCServiceServer
// for forward compatibility
type AccountGRPCServiceServer interface {
	GetAccount(context.Context, *AccountID) (*Account, error)
	GetUserAccounts(context.Context, *UserID) (*AllAccounts, error)
	GetAllUsers(context.Context, *emptypb.Empty) (*AllAccounts, error)
	CreateAccount(context.Context, *UserID) (*Account, error)
	UpdateAccount(context.Context, *Account) (*Account, error)
	DeleteAccount(context.Context, *AccountID) (*emptypb.Empty, error)
	mustEmbedUnimplementedAccountGRPCServiceServer()
}

// UnimplementedAccountGRPCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountGRPCServiceServer struct {
}

func (UnimplementedAccountGRPCServiceServer) GetAccount(context.Context, *AccountID) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAccountGRPCServiceServer) GetUserAccounts(context.Context, *UserID) (*AllAccounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccounts not implemented")
}
func (UnimplementedAccountGRPCServiceServer) GetAllUsers(context.Context, *emptypb.Empty) (*AllAccounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedAccountGRPCServiceServer) CreateAccount(context.Context, *UserID) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountGRPCServiceServer) UpdateAccount(context.Context, *Account) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedAccountGRPCServiceServer) DeleteAccount(context.Context, *AccountID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedAccountGRPCServiceServer) mustEmbedUnimplementedAccountGRPCServiceServer() {}

// UnsafeAccountGRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountGRPCServiceServer will
// result in compilation errors.
type UnsafeAccountGRPCServiceServer interface {
	mustEmbedUnimplementedAccountGRPCServiceServer()
}

func RegisterAccountGRPCServiceServer(s grpc.ServiceRegistrar, srv AccountGRPCServiceServer) {
	s.RegisterService(&AccountGRPCService_ServiceDesc, srv)
}

func _AccountGRPCService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountGRPCServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountGRPC.AccountGRPCService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountGRPCServiceServer).GetAccount(ctx, req.(*AccountID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountGRPCService_GetUserAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountGRPCServiceServer).GetUserAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountGRPC.AccountGRPCService/GetUserAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountGRPCServiceServer).GetUserAccounts(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountGRPCService_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountGRPCServiceServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountGRPC.AccountGRPCService/GetAllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountGRPCServiceServer).GetAllUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountGRPCService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountGRPCServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountGRPC.AccountGRPCService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountGRPCServiceServer).CreateAccount(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountGRPCService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountGRPCServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountGRPC.AccountGRPCService/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountGRPCServiceServer).UpdateAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountGRPCService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountGRPCServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountGRPC.AccountGRPCService/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountGRPCServiceServer).DeleteAccount(ctx, req.(*AccountID))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountGRPCService_ServiceDesc is the grpc.ServiceDesc for AccountGRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountGRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accountGRPC.AccountGRPCService",
	HandlerType: (*AccountGRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _AccountGRPCService_GetAccount_Handler,
		},
		{
			MethodName: "GetUserAccounts",
			Handler:    _AccountGRPCService_GetUserAccounts_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _AccountGRPCService_GetAllUsers_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _AccountGRPCService_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountGRPCService_UpdateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _AccountGRPCService_DeleteAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
