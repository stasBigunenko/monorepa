// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserGRPCServiceClient is the client API for UserGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserGRPCServiceClient interface {
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error)
	GetAllUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllUsers, error)
	Create(ctx context.Context, in *Name, opts ...grpc.CallOption) (*User, error)
	Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userGRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGRPCServiceClient(cc grpc.ClientConnInterface) UserGRPCServiceClient {
	return &userGRPCServiceClient{cc}
}

func (c *userGRPCServiceClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/userGRPC.UserGRPCService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGRPCServiceClient) GetAllUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllUsers, error) {
	out := new(AllUsers)
	err := c.cc.Invoke(ctx, "/userGRPC.UserGRPCService/GetAllUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGRPCServiceClient) Create(ctx context.Context, in *Name, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/userGRPC.UserGRPCService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGRPCServiceClient) Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/userGRPC.UserGRPCService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGRPCServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/userGRPC.UserGRPCService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGRPCServiceServer is the server API for UserGRPCService service.
// All implementations must embed UnimplementedUserGRPCServiceServer
// for forward compatibility
type UserGRPCServiceServer interface {
	Get(context.Context, *Id) (*User, error)
	GetAllUsers(context.Context, *emptypb.Empty) (*AllUsers, error)
	Create(context.Context, *Name) (*User, error)
	Update(context.Context, *User) (*User, error)
	Delete(context.Context, *Id) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserGRPCServiceServer()
}

// UnimplementedUserGRPCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserGRPCServiceServer struct {
}

func (UnimplementedUserGRPCServiceServer) Get(context.Context, *Id) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserGRPCServiceServer) GetAllUsers(context.Context, *emptypb.Empty) (*AllUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedUserGRPCServiceServer) Create(context.Context, *Name) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserGRPCServiceServer) Update(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserGRPCServiceServer) Delete(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserGRPCServiceServer) mustEmbedUnimplementedUserGRPCServiceServer() {}

// UnsafeUserGRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserGRPCServiceServer will
// result in compilation errors.
type UnsafeUserGRPCServiceServer interface {
	mustEmbedUnimplementedUserGRPCServiceServer()
}

func RegisterUserGRPCServiceServer(s grpc.ServiceRegistrar, srv UserGRPCServiceServer) {
	s.RegisterService(&UserGRPCService_ServiceDesc, srv)
}

func _UserGRPCService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGRPCServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userGRPC.UserGRPCService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGRPCServiceServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGRPCService_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGRPCServiceServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userGRPC.UserGRPCService/GetAllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGRPCServiceServer).GetAllUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGRPCService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGRPCServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userGRPC.UserGRPCService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGRPCServiceServer).Create(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGRPCService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGRPCServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userGRPC.UserGRPCService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGRPCServiceServer).Update(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGRPCService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGRPCServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userGRPC.UserGRPCService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGRPCServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// UserGRPCService_ServiceDesc is the grpc.ServiceDesc for UserGRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserGRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userGRPC.UserGRPCService",
	HandlerType: (*UserGRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _UserGRPCService_Get_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _UserGRPCService_GetAllUsers_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _UserGRPCService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserGRPCService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserGRPCService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
