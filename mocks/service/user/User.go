// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocksUserInt

import (
	context "context"

	model "github.com/stasBigunenko/monorepa/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *User) Create(_a0 context.Context, _a1 string) (model.UserHTTP, error) {
	ret := _m.Called(_a0, _a1)

	var r0 model.UserHTTP
	if rf, ok := ret.Get(0).(func(context.Context, string) model.UserHTTP); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.UserHTTP)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *User) Delete(_a0 context.Context, _a1 uuid.UUID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *User) Get(_a0 context.Context, _a1 uuid.UUID) (model.UserHTTP, error) {
	ret := _m.Called(_a0, _a1)

	var r0 model.UserHTTP
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.UserHTTP); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.UserHTTP)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: _a0
func (_m *User) GetAll(_a0 context.Context) ([]model.UserHTTP, error) {
	ret := _m.Called(_a0)

	var r0 []model.UserHTTP
	if rf, ok := ret.Get(0).(func(context.Context) []model.UserHTTP); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserHTTP)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *User) Update(_a0 context.Context, _a1 model.UserHTTP) (model.UserHTTP, error) {
	ret := _m.Called(_a0, _a1)

	var r0 model.UserHTTP
	if rf, ok := ret.Get(0).(func(context.Context, model.UserHTTP) model.UserHTTP); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.UserHTTP)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserHTTP) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
